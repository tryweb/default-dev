stages:
- name: "Build--build and push docker image"
  steps:
  - env:
      PLUGIN_BUILD_ARGS: "--progress=tty --network=host"
      PLUGIN_DEBUG: true
      PLUGIN_INSECURE: true
      PLUGIN_MIRROR: "https://harbor-dev.iiidevops.org"
      PLUGIN_MTU: 1000
    publishImageConfig:
      dockerfilePath: "./Dockerfile"
      buildContext: "."
      tag: "${CICD_GIT_REPO_NAME}/${CICD_GIT_BRANCH}:latest"
      pushRemote: true
      registry: "harbor-dev.iiidevops.org"
    when:
      branch:
        include:
        - skip
      
- name: Test--Sonarqube source code scan
  steps:
  - applyAppConfig:
      catalogTemplate: cattle-global-data:iii-dev-charts3-scan-sonarqube
      version: 0.1.0
      name: "${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-sq"
      targetNamespace: "${CICD_GIT_REPO_NAME}"
      answers:
        git.branch: "${CICD_GIT_BRANCH}"
        git.commitID: "${CICD_GIT_COMMIT}"
        git.repoName: "${CICD_GIT_REPO_NAME}"
        git.url: "${CICD_GIT_URL}"
        pipeline.sequence: "${CICD_EXECUTION_SEQUENCE}"
    when:
      branch:
        include:
        - master
        - develop

- name: Test--Checkmarx source code scan
  steps:
  - applyAppConfig:
      catalogTemplate: cattle-global-data:iii-dev-charts3-scan-checkmarx
      version: 0.1.0
      name: ${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-cmx
      targetNamespace: ${CICD_GIT_REPO_NAME}
      answers:
        # Test common answers
        pipeline.sequence: ${CICD_EXECUTION_SEQUENCE}
        git.url: ${CICD_GIT_URL}
        git.repoName: ${CICD_GIT_REPO_NAME}
        git.branch: ${CICD_GIT_BRANCH}
        git.commitID: ${CICD_GIT_COMMIT}
  when:
    branch:
      include:
        - master
        - develop

- name: Deploy--Setting Web environment variables
  steps:
  # 需要符合Rancher版本
  - runScriptConfig:
      image: iiiorg/rancher-cli:v2.4.6
      shellScript: rancher login ${rancher_url} -t ${rancher_api_token} --skip-verify && 
        rancher kubectl delete configmap -n ${CICD_GIT_REPO_NAME} ${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-env 
        --ignore-not-found=true && 
        rancher kubectl create configmap -n ${CICD_GIT_REPO_NAME} ${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-env 
        --from-env-file=iiidevops/app.env && 
        rancher kubectl annotate configmap -n ${CICD_GIT_REPO_NAME} ${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-env 
        iiidevops.org/project_name=${CICD_GIT_REPO_NAME} iiidevops.org/branch=${CICD_GIT_BRANCH} 
        iiidevops.org/commit_id=${CICD_GIT_COMMIT} iiidevops.org/type=appenv
    # Rancher管理授權連線
    envFrom:
    - sourceKey: API_TOKEN
      sourceName: pipeline-api-key
      targetKey: rancher_api_token
    - sourceKey: rancher-url
      sourceName: rancher
      targetKey: rancher_url
    when:
      branch:
        include:
        - skip

- name: "Deploy--Web"
  steps:
  - applyAppConfig:
      catalogTemplate: "cattle-global-data:iii-dev-charts3-web"
      version: "0.5.1"
      name: "${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-web"
      targetNamespace: "${CICD_GIT_REPO_NAME}"
      answers:
        git.branch: "${CICD_GIT_BRANCH}"
        git.commitID: "${CICD_GIT_COMMIT}"
        git.repoName: "${CICD_GIT_REPO_NAME}"
        git.url: "${CICD_GIT_URL}"
        harbor.host: "harbor-dev.iiidevops.org"
        web.imageTag: "${CICD_GIT_REPO_NAME}/${CICD_GIT_BRANCH}:latest"
        web.port: 3000
    when:
      branch:
        include:
        - skip

- name: "Deploy--Wait Web deployment"
  steps:
  - runScriptConfig:
      image: "iiiorg/deployment-waiter:0.0.2"
      shellScript: "rancher login ${rancher_url} -t ${rancher_api_token} --skip-verify;\n\
        bash /app/run.sh;"
    env:
      deploy_name: "${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-web"
      max_wait: 128
      namespace: "${CICD_GIT_REPO_NAME}"
    envFrom:
    - sourceKey: "API_TOKEN"
      sourceName: "pipeline-api-key"
      targetKey: "rancher_api_token"
    - sourceKey: "rancher-url"
      sourceName: "rancher"
      targetKey: "rancher_url"
    when:
      branch:
        include:
        - skip

- name: "Test--Postman"
  steps:
  - applyAppConfig:
      catalogTemplate: "cattle-global-data:iii-dev-charts3-test-postman"
      version: "0.1.0"
      name: "${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-pm"
      targetNamespace: "${CICD_GIT_REPO_NAME}"
      answers:
        git.branch: "${CICD_GIT_BRANCH}"
        git.commitID: "${CICD_GIT_COMMIT}"
        git.repoName: "${CICD_GIT_REPO_NAME}"
        git.url: "${CICD_GIT_URL}"
        pipeline.sequence: "${CICD_EXECUTION_SEQUENCE}"
        web.deployName: "${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-web"
        web.port: 3000
    when:
      branch:
        include:
        - skip

- name: "Test--Webinspect"
  steps:
  - applyAppConfig:
      catalogTemplate: "cattle-global-data:iii-dev-charts3-test-webinspect"
      version: "0.1.0"
      name: "${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-wi"
      targetNamespace: "${CICD_GIT_REPO_NAME}"
      answers:
        git.branch: "${CICD_GIT_BRANCH}"
        git.commitID: "${CICD_GIT_COMMIT}"
        git.repoName: "${CICD_GIT_REPO_NAME}"
        git.url: "${CICD_GIT_URL}"
        pipeline.sequence: "${CICD_EXECUTION_SEQUENCE}"
        web.deployName: "${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-web"
    when:
      branch:
        include:
        - skip

- name: Test--ZAP
  steps:
  - applyAppConfig:
      catalogTemplate: cattle-global-data:iii-dev-charts3-test-zap
      version: 0.1.0
      name: ${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-zap
      targetNamespace: ${CICD_GIT_REPO_NAME}
      answers:
        git.branch: ${CICD_GIT_BRANCH}
        git.commitID: ${CICD_GIT_COMMIT}
        git.repoName: ${CICD_GIT_REPO_NAME}
        git.url: ${CICD_GIT_URL}
        pipeline.sequence: ${CICD_EXECUTION_SEQUENCE}
        web.deployName: ${CICD_GIT_REPO_NAME}-${CICD_GIT_BRANCH}-serv
        web.port: 3000
  when:
    branch:
      include:
        - skip